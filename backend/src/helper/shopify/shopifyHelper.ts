import GetDashboardSalesDTO from "../../dto/dashboard/getDashboardSalesDto";
import {
  DiscountCodes,
  ShopifyOrderResponse,
} from "../../types/response/dashboard/shopifyOrderResponse";

export default class ShopifyHelper {
  public getTotalSalesGenerated(orders: Array<ShopifyOrderResponse>): number {
    const totalSales = orders.reduce(
      (total: number, order: ShopifyOrderResponse) => {
        return total + parseFloat(order.total_price);
      },
      0
    );
    return totalSales;
  }

  public getRetentionRevenue(
    orders: Array<ShopifyOrderResponse>,
    getDashboardSalesDto: GetDashboardSalesDTO
  ): number {
    // Filter orders by UTM parameters and tracking timeframe
    const utmCampaign = getDashboardSalesDto.utmCampaign;
    const utmMedium = getDashboardSalesDto.utmMedium;
    const utmSource = getDashboardSalesDto.utmSource;
    const trackingTimeframe = getDashboardSalesDto.trackingTimeFrame; // in days
    const retentionOrders = orders.filter((order: ShopifyOrderResponse) => {
      return (
        order.note_attributes &&
        order.note_attributes.some((attribute: any) => {
          const attributeUTM = attribute.value.toLowerCase();
          return (
            attribute.name.toLowerCase() === "utm" &&
            attributeUTM.includes(`utm_campaign=${utmCampaign}`) &&
            attributeUTM.includes(`utm_medium=${utmMedium}`) &&
            attributeUTM.includes(`utm_source=${utmSource}`)
          );
        })
      );
    });
    // Calculate retention revenue within the specified timeframe
    const currentDate = new Date();
    currentDate.setDate(currentDate.getDate() - trackingTimeframe);
    const retentionRevenue = retentionOrders.reduce(
      (totalRevenue: number, order: ShopifyOrderResponse) => {
        const orderDate = new Date(order.created_at);
        if (orderDate >= currentDate) {
          return totalRevenue + parseFloat(order.total_price);
        }
        return totalRevenue;
      },
      0
    );
    return retentionRevenue;
  }

  public getIncentivizedRevenue(
    orders: Array<ShopifyOrderResponse>,
    discountCode: string
  ): number {
    // Filter orders by discount code generated by your app
    const incentivizedOrders = orders.filter((order: ShopifyOrderResponse) => {
      return (
        order.discount_codes &&
        order.discount_codes.some(
          (code: DiscountCodes) => code.code === discountCode
        )
      );
    });
    // Calculate incentivized revenue
    const incentivizedRevenue = incentivizedOrders.reduce(
      (totalRevenue: number, order: ShopifyOrderResponse) => {
        return totalRevenue + parseFloat(order.total_price);
      },
      0
    );
    return incentivizedRevenue;
  }

  public getConversionRevenue(
    orders: Array<ShopifyOrderResponse>,
    interactionTimeframe: number
  ): number {
    // Filter orders by widget interaction within the specified timeframe
    const widgetInteractionOrders = orders.filter(
      (order: ShopifyOrderResponse) => {
        const orderDate = new Date(order.created_at);
        const currentDate = new Date();
        const interactionDate = new Date(
          currentDate.setDate(currentDate.getDate() - interactionTimeframe)
        );
        return orderDate >= interactionDate;
      }
    );
    // Calculate conversion revenue
    const conversionRevenue = widgetInteractionOrders.reduce(
      (totalRevenue: number, order: ShopifyOrderResponse) => {
        return totalRevenue + parseFloat(order.total_price);
      },
      0
    );
    return conversionRevenue;
  }

  public getReferralRevenue(
    orders: Array<ShopifyOrderResponse>,
    referralSource: string
  ): number {
    // Filter orders by referral source
    const referralOrders = orders.filter((order: ShopifyOrderResponse) => {
      return (
        order.source_name &&
        order.source_name.toLowerCase() === referralSource.toLowerCase()
      );
    });
    // Calculate referral revenue
    const referralRevenue = referralOrders.reduce(
      (totalRevenue: number, order: ShopifyOrderResponse) => {
        return totalRevenue + parseFloat(order.total_price);
      },
      0
    );
    return referralRevenue;
  }

  public getReferralsCompleted(
    orders: Array<ShopifyOrderResponse>,
    referralCompletedTag: string
  ): number {
    const completedReferrals: Set<string> = new Set();
    // Track completed referrals
    for (const order of orders) {
      if (order.tags && order.tags.includes(referralCompletedTag)) {
        if (order.referring_site) {
          completedReferrals.add(order.referring_site);
        }
      }
    }
    return completedReferrals.size;
  }

  public getReferredOrdersGenerated(
    orders: Array<ShopifyOrderResponse>,
    referredCustomerTag: string
  ): number {
    let referredCustomerOrderCount = 0;
    // Track orders from referred customers
    for (const order of orders) {
      if (order.tags && order.tags.includes(referredCustomerTag)) {
        referredCustomerOrderCount++;
      }
    }
    return referredCustomerOrderCount;
  }
}
